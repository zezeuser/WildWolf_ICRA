<launch>
    <!-- these are the arguments you can pass this launch file, for example gui:=true -->
    <arg name="paused" default="false"/>
    <arg name="use_sim_time" default="true"/>
    <arg name="gui" default="true"/>
    <arg name="headless" default="false"/>
    <arg name="debug" default="false"/>
    <arg name="map" value="RMUA_2020"/>

    <arg name="robot_name"                default="red1"/>
    <arg name="init_x"                    default="0.8"/>
    <arg name="init_y"                    default="4.2"/>
    <arg name="init_a"                    default="0"/>
    <arg name="ns"                        default="red1"/>
    <arg name="config"                    default="our_side" />


    <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find icra_robomaster_emulator)/worlds/RMUA_2020.world"/>
    <arg name="debug" value="$(arg debug)"/>
    <arg name="gui" value="$(arg gui)"/>
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
    </include>

    <!-- launch the transform node -->
    <include file="$(find icra_robomaster_emulator)/launch/transform_red1.launch"/>

<!-- 启动rviz -->
        <node pkg="rviz" type="rviz" name="rviz" args="-d $(find icra_robomaster_emulator)/rviz/red1.rviz"/>

<!-- 加载模型参数 -->   
  <param name="/$(arg ns)/robot_description"
         command="$(find ridgeback_description)/scripts/env_run
                  $(find ridgeback_description)/urdf/configs/$(arg config)
                  $(find xacro)/xacro '$(find ridgeback_description)/urdf/ridgeback.urdf.xacro'
                  '--inorder' 'namespace:=$(arg ns)'" />


<!-- Spawn Ridgeback -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" ns="$(arg ns)"
        args="-x $(arg init_x) -y $(arg init_y) -z 0 -Y $(arg init_a)
        -urdf -model $(arg ns) -param /$(arg ns)/robot_description" />


  <rosparam param="/$(arg ns)/gazebo_ros_control/pid_gains">
    front_left_wheel:
      p: 1
      i: 0.1
      d: 0
    front_right_wheel:
      p: 1
      i: 0.1
      d: 0
    rear_left_wheel:
      p: 1
      i: 0.1
      d: 0
    rear_right_wheel:
      p: 1
      i: 0.1
      d: 0
    front_camera_pivot_joint:
      p: 100
      i: 10.0
      d: 10.0
  </rosparam>



<!-- 以下在red1的命名空间内 -->
<group ns="red1">
	<!-- 参数加载 -->
    	 <param name="tf_prefix" value="red1"/>
   	 <rosparam command="load" file="$(find roborts_localization)/config/localization.yaml" />
   	 <rosparam command="load" file="$(find roborts_localization)/amcl/config/amcl.yaml" />

	<!-- Run the map server -->
  <node name="map_server" pkg="map_server" type="map_server" args="$(find icra_robomaster_emulator)/map/$(arg map).yaml" respawn="false"  />


   	 <!-- 发布静态TF -->
   	 <node name="tf_footprint_base" pkg="tf" type="static_transform_publisher"
              args="0 0 0 0 0 0 red1/base_footprint red1/base_link 40"/>

        <!-- 运行joint_state_publisher节点，发布机器人的关节状态  -->
        <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher"></node>
       
        <!-- 运行robot_state_publisher节点，发布tf  -->
        <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" output="screen">
            <param name="publish_frequency" type="double" value="50.0"/>
        </node>
	
  	<!-- Run the global planner node -->
  	<node pkg="roborts_planning" type="global_planner_node" name="global_planner_node" respawn="false" />

  	<!-- Run the local planner node -->
  	<node pkg="roborts_planning" type="local_planner_node" name="local_planner_node" respawn="false" output="screen" >
    	<remap from="/local_planner_node_action/feedback"           to="/$(arg ns)/local_planner_node_action/feedback" />
    	<remap from="/local_planner_node_action/result"             to="/$(arg ns)/local_planner_node_action/result" />
   	 <remap from="/local_planner_node_action/status"             to="/$(arg ns)/local_planner_node_action/status" />
   	 <remap from="/local_planner_node_action/goal"               to="/$(arg ns)/local_planner_node_action/goal" />
   	 <remap from="/local_planner_node_action/cancel"             to="/$(arg ns)/local_planner_node_action/cancel" />
  	</node>

	<!-- Run the velocity converter node -->
  	<node pkg="roborts_planning" type="vel_converter" name="vel_converter_node" respawn="false" />

	<!-- Run the localization node -->
  	<node pkg="roborts_localization" type="localization_node" name="localization_node" respawn="false" />
	
    </group>





</launch>
