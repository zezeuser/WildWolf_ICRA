// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: decision.proto

#include "decision.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_decision_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_decision_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_EscapeConstraint;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_decision_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Point;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_decision_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SearchConstraint;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_decision_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_WhirlVel;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_decision_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_MultiRobot;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_decision_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_BlueOrRedGroup;
}  // namespace protobuf_decision_2eproto
namespace roborts_decision {
class PointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Point>
      _instance;
} _Point_default_instance_;
class EscapeConstraintDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EscapeConstraint>
      _instance;
} _EscapeConstraint_default_instance_;
class SearchConstraintDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SearchConstraint>
      _instance;
} _SearchConstraint_default_instance_;
class WhirlVelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WhirlVel>
      _instance;
} _WhirlVel_default_instance_;
class MultiRobotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MultiRobot>
      _instance;
} _MultiRobot_default_instance_;
class BlueOrRedGroupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BlueOrRedGroup>
      _instance;
} _BlueOrRedGroup_default_instance_;
class DecisionConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DecisionConfig>
      _instance;
} _DecisionConfig_default_instance_;
}  // namespace roborts_decision
namespace protobuf_decision_2eproto {
static void InitDefaultsPoint() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::roborts_decision::_Point_default_instance_;
    new (ptr) ::roborts_decision::Point();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::roborts_decision::Point::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Point =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPoint}, {}};

static void InitDefaultsEscapeConstraint() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::roborts_decision::_EscapeConstraint_default_instance_;
    new (ptr) ::roborts_decision::EscapeConstraint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::roborts_decision::EscapeConstraint::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EscapeConstraint =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEscapeConstraint}, {}};

static void InitDefaultsSearchConstraint() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::roborts_decision::_SearchConstraint_default_instance_;
    new (ptr) ::roborts_decision::SearchConstraint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::roborts_decision::SearchConstraint::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SearchConstraint =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSearchConstraint}, {}};

static void InitDefaultsWhirlVel() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::roborts_decision::_WhirlVel_default_instance_;
    new (ptr) ::roborts_decision::WhirlVel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::roborts_decision::WhirlVel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_WhirlVel =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWhirlVel}, {}};

static void InitDefaultsMultiRobot() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::roborts_decision::_MultiRobot_default_instance_;
    new (ptr) ::roborts_decision::MultiRobot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::roborts_decision::MultiRobot::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MultiRobot =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMultiRobot}, {
      &protobuf_decision_2eproto::scc_info_Point.base,}};

static void InitDefaultsBlueOrRedGroup() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::roborts_decision::_BlueOrRedGroup_default_instance_;
    new (ptr) ::roborts_decision::BlueOrRedGroup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::roborts_decision::BlueOrRedGroup::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_BlueOrRedGroup =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsBlueOrRedGroup}, {
      &protobuf_decision_2eproto::scc_info_MultiRobot.base,
      &protobuf_decision_2eproto::scc_info_Point.base,}};

static void InitDefaultsDecisionConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::roborts_decision::_DecisionConfig_default_instance_;
    new (ptr) ::roborts_decision::DecisionConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::roborts_decision::DecisionConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_DecisionConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsDecisionConfig}, {
      &protobuf_decision_2eproto::scc_info_EscapeConstraint.base,
      &protobuf_decision_2eproto::scc_info_BlueOrRedGroup.base,
      &protobuf_decision_2eproto::scc_info_SearchConstraint.base,
      &protobuf_decision_2eproto::scc_info_WhirlVel.base,
      &protobuf_decision_2eproto::scc_info_Point.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Point.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EscapeConstraint.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SearchConstraint.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WhirlVel.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MultiRobot.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BlueOrRedGroup.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DecisionConfig.base);
}

::google::protobuf::Metadata file_level_metadata[7];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_decision::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_decision::Point, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_decision::Point, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_decision::Point, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_decision::Point, roll_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_decision::Point, pitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_decision::Point, yaw_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_decision::EscapeConstraint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_decision::EscapeConstraint, left_x_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_decision::EscapeConstraint, right_x_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_decision::EscapeConstraint, robot_x_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_decision::EscapeConstraint, left_random_min_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_decision::EscapeConstraint, left_random_max_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_decision::EscapeConstraint, right_random_min_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_decision::EscapeConstraint, right_random_max_x_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_decision::SearchConstraint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_decision::SearchConstraint, x_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_decision::SearchConstraint, y_limit_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_decision::WhirlVel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_decision::WhirlVel, angle_x_vel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_decision::WhirlVel, angle_y_vel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_decision::WhirlVel, angle_z_vel_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_decision::MultiRobot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_decision::MultiRobot, start_position_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_decision::BlueOrRedGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_decision::BlueOrRedGroup, master_bot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_decision::BlueOrRedGroup, wing_bot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_decision::BlueOrRedGroup, reload_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_decision::BlueOrRedGroup, shield_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_decision::BlueOrRedGroup, patrol_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_decision::DecisionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_decision::DecisionConfig, strategy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_decision::DecisionConfig, use_camera_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_decision::DecisionConfig, master_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_decision::DecisionConfig, isblue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_decision::DecisionConfig, usewifi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_decision::DecisionConfig, master_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_decision::DecisionConfig, guard_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_decision::DecisionConfig, remain_bullet_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_decision::DecisionConfig, escape_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_decision::DecisionConfig, blue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_decision::DecisionConfig, red_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_decision::DecisionConfig, search_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_decision::DecisionConfig, whirl_vel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_decision::DecisionConfig, search_region_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_decision::DecisionConfig, search_region_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_decision::DecisionConfig, search_region_3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_decision::DecisionConfig, search_region_4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_decision::DecisionConfig, can_shoot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_decision::DecisionConfig, can_dodge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_decision::DecisionConfig, dodge_in_reload_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_decision::DecisionConfig, shoot_hz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::roborts_decision::DecisionConfig, use_refree_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::roborts_decision::Point)},
  { 11, -1, sizeof(::roborts_decision::EscapeConstraint)},
  { 23, -1, sizeof(::roborts_decision::SearchConstraint)},
  { 30, -1, sizeof(::roborts_decision::WhirlVel)},
  { 38, -1, sizeof(::roborts_decision::MultiRobot)},
  { 44, -1, sizeof(::roborts_decision::BlueOrRedGroup)},
  { 54, -1, sizeof(::roborts_decision::DecisionConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::roborts_decision::_Point_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::roborts_decision::_EscapeConstraint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::roborts_decision::_SearchConstraint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::roborts_decision::_WhirlVel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::roborts_decision::_MultiRobot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::roborts_decision::_BlueOrRedGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::roborts_decision::_DecisionConfig_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "decision.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016decision.proto\022\020roborts_decision\"R\n\005Po"
      "int\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\022\014\n\004"
      "roll\030\004 \001(\002\022\r\n\005pitch\030\005 \001(\002\022\013\n\003yaw\030\006 \001(\002\"\304"
      "\001\n\020EscapeConstraint\022\024\n\014left_x_limit\030\001 \001("
      "\002\022\025\n\rright_x_limit\030\002 \001(\002\022\025\n\rrobot_x_limi"
      "t\030\003 \001(\002\022\031\n\021left_random_min_x\030\004 \001(\002\022\031\n\021le"
      "ft_random_max_x\030\005 \001(\002\022\032\n\022right_random_mi"
      "n_x\030\006 \001(\002\022\032\n\022right_random_max_x\030\007 \001(\002\"4\n"
      "\020SearchConstraint\022\017\n\007x_limit\030\001 \001(\002\022\017\n\007y_"
      "limit\030\002 \001(\002\"I\n\010WhirlVel\022\023\n\013angle_x_vel\030\001"
      " \001(\002\022\023\n\013angle_y_vel\030\002 \001(\002\022\023\n\013angle_z_vel"
      "\030\003 \001(\002\"=\n\nMultiRobot\022/\n\016start_position\030\007"
      " \001(\0132\027.roborts_decision.Point\"\371\001\n\016BlueOr"
      "RedGroup\0220\n\nmaster_bot\030\001 \001(\0132\034.roborts_d"
      "ecision.MultiRobot\022.\n\010wing_bot\030\002 \001(\0132\034.r"
      "oborts_decision.MultiRobot\022-\n\014reload_poi"
      "nt\030\003 \001(\0132\027.roborts_decision.Point\022-\n\014shi"
      "eld_point\030\004 \001(\0132\027.roborts_decision.Point"
      "\022\'\n\006patrol\030\005 \003(\0132\027.roborts_decision.Poin"
      "t\"\314\005\n\016DecisionConfig\022\020\n\010strategy\030\001 \001(\t\022\022"
      "\n\nuse_camera\030\002 \001(\010\022\016\n\006master\030\003 \001(\010\022\016\n\006is"
      "blue\030\004 \001(\010\022\017\n\007usewifi\030\005 \001(\010\022\021\n\tmaster_ip"
      "\030\006 \001(\t\022\020\n\010guard_ip\030\007 \001(\t\022\025\n\rremain_bulle"
      "t\030\010 \001(\005\0222\n\006escape\030\t \001(\0132\".roborts_decisi"
      "on.EscapeConstraint\022.\n\004blue\030\n \001(\0132 .robo"
      "rts_decision.BlueOrRedGroup\022-\n\003red\030\013 \001(\013"
      "2 .roborts_decision.BlueOrRedGroup\0228\n\014se"
      "arch_limit\030\014 \001(\0132\".roborts_decision.Sear"
      "chConstraint\022-\n\twhirl_vel\030\r \001(\0132\032.robort"
      "s_decision.WhirlVel\0220\n\017search_region_1\030\016"
      " \003(\0132\027.roborts_decision.Point\0220\n\017search_"
      "region_2\030\017 \003(\0132\027.roborts_decision.Point\022"
      "0\n\017search_region_3\030\020 \003(\0132\027.roborts_decis"
      "ion.Point\0220\n\017search_region_4\030\021 \003(\0132\027.rob"
      "orts_decision.Point\022\021\n\tcan_shoot\030\022 \001(\010\022\021"
      "\n\tcan_dodge\030\023 \001(\010\022\027\n\017dodge_in_reload\030\024 \001"
      "(\010\022\020\n\010shoot_hz\030\025 \001(\005\022\022\n\nuse_refree\030\026 \001(\010"
      "b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1488);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "decision.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_decision_2eproto
namespace roborts_decision {

// ===================================================================

void Point::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
const int Point::kZFieldNumber;
const int Point::kRollFieldNumber;
const int Point::kPitchFieldNumber;
const int Point::kYawFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point::Point()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_decision_2eproto::scc_info_Point.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_decision.Point)
}
Point::Point(const Point& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaw_) -
    reinterpret_cast<char*>(&x_)) + sizeof(yaw_));
  // @@protoc_insertion_point(copy_constructor:roborts_decision.Point)
}

void Point::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_) -
      reinterpret_cast<char*>(&x_)) + sizeof(yaw_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:roborts_decision.Point)
  SharedDtor();
}

void Point::SharedDtor() {
}

void Point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  ::protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Point& Point::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_decision_2eproto::scc_info_Point.base);
  return *internal_default_instance();
}


void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_decision.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_) -
      reinterpret_cast<char*>(&x_)) + sizeof(yaw_));
  _internal_metadata_.Clear();
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_decision.Point)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float roll = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pitch = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yaw = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_decision.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_decision.Point)
  return false;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_decision.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // float z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // float roll = 4;
  if (this->roll() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->roll(), output);
  }

  // float pitch = 5;
  if (this->pitch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->pitch(), output);
  }

  // float yaw = 6;
  if (this->yaw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->yaw(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_decision.Point)
}

::google::protobuf::uint8* Point::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:roborts_decision.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // float z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // float roll = 4;
  if (this->roll() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->roll(), target);
  }

  // float pitch = 5;
  if (this->pitch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->pitch(), target);
  }

  // float yaw = 6;
  if (this->yaw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->yaw(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_decision.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_decision.Point)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  // float roll = 4;
  if (this->roll() != 0) {
    total_size += 1 + 4;
  }

  // float pitch = 5;
  if (this->pitch() != 0) {
    total_size += 1 + 4;
  }

  // float yaw = 6;
  if (this->yaw() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roborts_decision.Point)
  GOOGLE_DCHECK_NE(&from, this);
  const Point* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Point>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roborts_decision.Point)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roborts_decision.Point)
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roborts_decision.Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
  if (from.roll() != 0) {
    set_roll(from.roll());
  }
  if (from.pitch() != 0) {
    set_pitch(from.pitch());
  }
  if (from.yaw() != 0) {
    set_yaw(from.yaw());
  }
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roborts_decision.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_decision.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::Swap(Point* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point::InternalSwap(Point* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(roll_, other->roll_);
  swap(pitch_, other->pitch_);
  swap(yaw_, other->yaw_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EscapeConstraint::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EscapeConstraint::kLeftXLimitFieldNumber;
const int EscapeConstraint::kRightXLimitFieldNumber;
const int EscapeConstraint::kRobotXLimitFieldNumber;
const int EscapeConstraint::kLeftRandomMinXFieldNumber;
const int EscapeConstraint::kLeftRandomMaxXFieldNumber;
const int EscapeConstraint::kRightRandomMinXFieldNumber;
const int EscapeConstraint::kRightRandomMaxXFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EscapeConstraint::EscapeConstraint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_decision_2eproto::scc_info_EscapeConstraint.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_decision.EscapeConstraint)
}
EscapeConstraint::EscapeConstraint(const EscapeConstraint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&left_x_limit_, &from.left_x_limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&right_random_max_x_) -
    reinterpret_cast<char*>(&left_x_limit_)) + sizeof(right_random_max_x_));
  // @@protoc_insertion_point(copy_constructor:roborts_decision.EscapeConstraint)
}

void EscapeConstraint::SharedCtor() {
  ::memset(&left_x_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_random_max_x_) -
      reinterpret_cast<char*>(&left_x_limit_)) + sizeof(right_random_max_x_));
}

EscapeConstraint::~EscapeConstraint() {
  // @@protoc_insertion_point(destructor:roborts_decision.EscapeConstraint)
  SharedDtor();
}

void EscapeConstraint::SharedDtor() {
}

void EscapeConstraint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EscapeConstraint::descriptor() {
  ::protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EscapeConstraint& EscapeConstraint::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_decision_2eproto::scc_info_EscapeConstraint.base);
  return *internal_default_instance();
}


void EscapeConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_decision.EscapeConstraint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&left_x_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_random_max_x_) -
      reinterpret_cast<char*>(&left_x_limit_)) + sizeof(right_random_max_x_));
  _internal_metadata_.Clear();
}

bool EscapeConstraint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_decision.EscapeConstraint)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float left_x_limit = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &left_x_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float right_x_limit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &right_x_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float robot_x_limit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &robot_x_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float left_random_min_x = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &left_random_min_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float left_random_max_x = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &left_random_max_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float right_random_min_x = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &right_random_min_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float right_random_max_x = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &right_random_max_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_decision.EscapeConstraint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_decision.EscapeConstraint)
  return false;
#undef DO_
}

void EscapeConstraint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_decision.EscapeConstraint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float left_x_limit = 1;
  if (this->left_x_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->left_x_limit(), output);
  }

  // float right_x_limit = 2;
  if (this->right_x_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->right_x_limit(), output);
  }

  // float robot_x_limit = 3;
  if (this->robot_x_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->robot_x_limit(), output);
  }

  // float left_random_min_x = 4;
  if (this->left_random_min_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->left_random_min_x(), output);
  }

  // float left_random_max_x = 5;
  if (this->left_random_max_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->left_random_max_x(), output);
  }

  // float right_random_min_x = 6;
  if (this->right_random_min_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->right_random_min_x(), output);
  }

  // float right_random_max_x = 7;
  if (this->right_random_max_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->right_random_max_x(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_decision.EscapeConstraint)
}

::google::protobuf::uint8* EscapeConstraint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:roborts_decision.EscapeConstraint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float left_x_limit = 1;
  if (this->left_x_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->left_x_limit(), target);
  }

  // float right_x_limit = 2;
  if (this->right_x_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->right_x_limit(), target);
  }

  // float robot_x_limit = 3;
  if (this->robot_x_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->robot_x_limit(), target);
  }

  // float left_random_min_x = 4;
  if (this->left_random_min_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->left_random_min_x(), target);
  }

  // float left_random_max_x = 5;
  if (this->left_random_max_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->left_random_max_x(), target);
  }

  // float right_random_min_x = 6;
  if (this->right_random_min_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->right_random_min_x(), target);
  }

  // float right_random_max_x = 7;
  if (this->right_random_max_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->right_random_max_x(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_decision.EscapeConstraint)
  return target;
}

size_t EscapeConstraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_decision.EscapeConstraint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float left_x_limit = 1;
  if (this->left_x_limit() != 0) {
    total_size += 1 + 4;
  }

  // float right_x_limit = 2;
  if (this->right_x_limit() != 0) {
    total_size += 1 + 4;
  }

  // float robot_x_limit = 3;
  if (this->robot_x_limit() != 0) {
    total_size += 1 + 4;
  }

  // float left_random_min_x = 4;
  if (this->left_random_min_x() != 0) {
    total_size += 1 + 4;
  }

  // float left_random_max_x = 5;
  if (this->left_random_max_x() != 0) {
    total_size += 1 + 4;
  }

  // float right_random_min_x = 6;
  if (this->right_random_min_x() != 0) {
    total_size += 1 + 4;
  }

  // float right_random_max_x = 7;
  if (this->right_random_max_x() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EscapeConstraint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roborts_decision.EscapeConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  const EscapeConstraint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EscapeConstraint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roborts_decision.EscapeConstraint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roborts_decision.EscapeConstraint)
    MergeFrom(*source);
  }
}

void EscapeConstraint::MergeFrom(const EscapeConstraint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roborts_decision.EscapeConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.left_x_limit() != 0) {
    set_left_x_limit(from.left_x_limit());
  }
  if (from.right_x_limit() != 0) {
    set_right_x_limit(from.right_x_limit());
  }
  if (from.robot_x_limit() != 0) {
    set_robot_x_limit(from.robot_x_limit());
  }
  if (from.left_random_min_x() != 0) {
    set_left_random_min_x(from.left_random_min_x());
  }
  if (from.left_random_max_x() != 0) {
    set_left_random_max_x(from.left_random_max_x());
  }
  if (from.right_random_min_x() != 0) {
    set_right_random_min_x(from.right_random_min_x());
  }
  if (from.right_random_max_x() != 0) {
    set_right_random_max_x(from.right_random_max_x());
  }
}

void EscapeConstraint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roborts_decision.EscapeConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EscapeConstraint::CopyFrom(const EscapeConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_decision.EscapeConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EscapeConstraint::IsInitialized() const {
  return true;
}

void EscapeConstraint::Swap(EscapeConstraint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EscapeConstraint::InternalSwap(EscapeConstraint* other) {
  using std::swap;
  swap(left_x_limit_, other->left_x_limit_);
  swap(right_x_limit_, other->right_x_limit_);
  swap(robot_x_limit_, other->robot_x_limit_);
  swap(left_random_min_x_, other->left_random_min_x_);
  swap(left_random_max_x_, other->left_random_max_x_);
  swap(right_random_min_x_, other->right_random_min_x_);
  swap(right_random_max_x_, other->right_random_max_x_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EscapeConstraint::GetMetadata() const {
  protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SearchConstraint::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchConstraint::kXLimitFieldNumber;
const int SearchConstraint::kYLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchConstraint::SearchConstraint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_decision_2eproto::scc_info_SearchConstraint.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_decision.SearchConstraint)
}
SearchConstraint::SearchConstraint(const SearchConstraint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_limit_, &from.x_limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_limit_) -
    reinterpret_cast<char*>(&x_limit_)) + sizeof(y_limit_));
  // @@protoc_insertion_point(copy_constructor:roborts_decision.SearchConstraint)
}

void SearchConstraint::SharedCtor() {
  ::memset(&x_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_limit_) -
      reinterpret_cast<char*>(&x_limit_)) + sizeof(y_limit_));
}

SearchConstraint::~SearchConstraint() {
  // @@protoc_insertion_point(destructor:roborts_decision.SearchConstraint)
  SharedDtor();
}

void SearchConstraint::SharedDtor() {
}

void SearchConstraint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SearchConstraint::descriptor() {
  ::protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SearchConstraint& SearchConstraint::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_decision_2eproto::scc_info_SearchConstraint.base);
  return *internal_default_instance();
}


void SearchConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_decision.SearchConstraint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_limit_) -
      reinterpret_cast<char*>(&x_limit_)) + sizeof(y_limit_));
  _internal_metadata_.Clear();
}

bool SearchConstraint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_decision.SearchConstraint)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x_limit = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y_limit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_decision.SearchConstraint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_decision.SearchConstraint)
  return false;
#undef DO_
}

void SearchConstraint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_decision.SearchConstraint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x_limit = 1;
  if (this->x_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x_limit(), output);
  }

  // float y_limit = 2;
  if (this->y_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y_limit(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_decision.SearchConstraint)
}

::google::protobuf::uint8* SearchConstraint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:roborts_decision.SearchConstraint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x_limit = 1;
  if (this->x_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x_limit(), target);
  }

  // float y_limit = 2;
  if (this->y_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y_limit(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_decision.SearchConstraint)
  return target;
}

size_t SearchConstraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_decision.SearchConstraint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float x_limit = 1;
  if (this->x_limit() != 0) {
    total_size += 1 + 4;
  }

  // float y_limit = 2;
  if (this->y_limit() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SearchConstraint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roborts_decision.SearchConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchConstraint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchConstraint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roborts_decision.SearchConstraint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roborts_decision.SearchConstraint)
    MergeFrom(*source);
  }
}

void SearchConstraint::MergeFrom(const SearchConstraint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roborts_decision.SearchConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x_limit() != 0) {
    set_x_limit(from.x_limit());
  }
  if (from.y_limit() != 0) {
    set_y_limit(from.y_limit());
  }
}

void SearchConstraint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roborts_decision.SearchConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchConstraint::CopyFrom(const SearchConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_decision.SearchConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchConstraint::IsInitialized() const {
  return true;
}

void SearchConstraint::Swap(SearchConstraint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SearchConstraint::InternalSwap(SearchConstraint* other) {
  using std::swap;
  swap(x_limit_, other->x_limit_);
  swap(y_limit_, other->y_limit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SearchConstraint::GetMetadata() const {
  protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WhirlVel::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WhirlVel::kAngleXVelFieldNumber;
const int WhirlVel::kAngleYVelFieldNumber;
const int WhirlVel::kAngleZVelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WhirlVel::WhirlVel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_decision_2eproto::scc_info_WhirlVel.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_decision.WhirlVel)
}
WhirlVel::WhirlVel(const WhirlVel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&angle_x_vel_, &from.angle_x_vel_,
    static_cast<size_t>(reinterpret_cast<char*>(&angle_z_vel_) -
    reinterpret_cast<char*>(&angle_x_vel_)) + sizeof(angle_z_vel_));
  // @@protoc_insertion_point(copy_constructor:roborts_decision.WhirlVel)
}

void WhirlVel::SharedCtor() {
  ::memset(&angle_x_vel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angle_z_vel_) -
      reinterpret_cast<char*>(&angle_x_vel_)) + sizeof(angle_z_vel_));
}

WhirlVel::~WhirlVel() {
  // @@protoc_insertion_point(destructor:roborts_decision.WhirlVel)
  SharedDtor();
}

void WhirlVel::SharedDtor() {
}

void WhirlVel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WhirlVel::descriptor() {
  ::protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WhirlVel& WhirlVel::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_decision_2eproto::scc_info_WhirlVel.base);
  return *internal_default_instance();
}


void WhirlVel::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_decision.WhirlVel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&angle_x_vel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angle_z_vel_) -
      reinterpret_cast<char*>(&angle_x_vel_)) + sizeof(angle_z_vel_));
  _internal_metadata_.Clear();
}

bool WhirlVel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_decision.WhirlVel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float angle_x_vel = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_x_vel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angle_y_vel = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_y_vel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angle_z_vel = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_z_vel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_decision.WhirlVel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_decision.WhirlVel)
  return false;
#undef DO_
}

void WhirlVel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_decision.WhirlVel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float angle_x_vel = 1;
  if (this->angle_x_vel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->angle_x_vel(), output);
  }

  // float angle_y_vel = 2;
  if (this->angle_y_vel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->angle_y_vel(), output);
  }

  // float angle_z_vel = 3;
  if (this->angle_z_vel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->angle_z_vel(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_decision.WhirlVel)
}

::google::protobuf::uint8* WhirlVel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:roborts_decision.WhirlVel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float angle_x_vel = 1;
  if (this->angle_x_vel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->angle_x_vel(), target);
  }

  // float angle_y_vel = 2;
  if (this->angle_y_vel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->angle_y_vel(), target);
  }

  // float angle_z_vel = 3;
  if (this->angle_z_vel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->angle_z_vel(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_decision.WhirlVel)
  return target;
}

size_t WhirlVel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_decision.WhirlVel)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float angle_x_vel = 1;
  if (this->angle_x_vel() != 0) {
    total_size += 1 + 4;
  }

  // float angle_y_vel = 2;
  if (this->angle_y_vel() != 0) {
    total_size += 1 + 4;
  }

  // float angle_z_vel = 3;
  if (this->angle_z_vel() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WhirlVel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roborts_decision.WhirlVel)
  GOOGLE_DCHECK_NE(&from, this);
  const WhirlVel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WhirlVel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roborts_decision.WhirlVel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roborts_decision.WhirlVel)
    MergeFrom(*source);
  }
}

void WhirlVel::MergeFrom(const WhirlVel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roborts_decision.WhirlVel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.angle_x_vel() != 0) {
    set_angle_x_vel(from.angle_x_vel());
  }
  if (from.angle_y_vel() != 0) {
    set_angle_y_vel(from.angle_y_vel());
  }
  if (from.angle_z_vel() != 0) {
    set_angle_z_vel(from.angle_z_vel());
  }
}

void WhirlVel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roborts_decision.WhirlVel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WhirlVel::CopyFrom(const WhirlVel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_decision.WhirlVel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WhirlVel::IsInitialized() const {
  return true;
}

void WhirlVel::Swap(WhirlVel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WhirlVel::InternalSwap(WhirlVel* other) {
  using std::swap;
  swap(angle_x_vel_, other->angle_x_vel_);
  swap(angle_y_vel_, other->angle_y_vel_);
  swap(angle_z_vel_, other->angle_z_vel_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WhirlVel::GetMetadata() const {
  protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MultiRobot::InitAsDefaultInstance() {
  ::roborts_decision::_MultiRobot_default_instance_._instance.get_mutable()->start_position_ = const_cast< ::roborts_decision::Point*>(
      ::roborts_decision::Point::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultiRobot::kStartPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultiRobot::MultiRobot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_decision_2eproto::scc_info_MultiRobot.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_decision.MultiRobot)
}
MultiRobot::MultiRobot(const MultiRobot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_start_position()) {
    start_position_ = new ::roborts_decision::Point(*from.start_position_);
  } else {
    start_position_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:roborts_decision.MultiRobot)
}

void MultiRobot::SharedCtor() {
  start_position_ = NULL;
}

MultiRobot::~MultiRobot() {
  // @@protoc_insertion_point(destructor:roborts_decision.MultiRobot)
  SharedDtor();
}

void MultiRobot::SharedDtor() {
  if (this != internal_default_instance()) delete start_position_;
}

void MultiRobot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MultiRobot::descriptor() {
  ::protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MultiRobot& MultiRobot::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_decision_2eproto::scc_info_MultiRobot.base);
  return *internal_default_instance();
}


void MultiRobot::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_decision.MultiRobot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && start_position_ != NULL) {
    delete start_position_;
  }
  start_position_ = NULL;
  _internal_metadata_.Clear();
}

bool MultiRobot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_decision.MultiRobot)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .roborts_decision.Point start_position = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_start_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_decision.MultiRobot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_decision.MultiRobot)
  return false;
#undef DO_
}

void MultiRobot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_decision.MultiRobot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .roborts_decision.Point start_position = 7;
  if (this->has_start_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_start_position(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_decision.MultiRobot)
}

::google::protobuf::uint8* MultiRobot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:roborts_decision.MultiRobot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .roborts_decision.Point start_position = 7;
  if (this->has_start_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_start_position(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_decision.MultiRobot)
  return target;
}

size_t MultiRobot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_decision.MultiRobot)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .roborts_decision.Point start_position = 7;
  if (this->has_start_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *start_position_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiRobot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roborts_decision.MultiRobot)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiRobot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MultiRobot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roborts_decision.MultiRobot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roborts_decision.MultiRobot)
    MergeFrom(*source);
  }
}

void MultiRobot::MergeFrom(const MultiRobot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roborts_decision.MultiRobot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_start_position()) {
    mutable_start_position()->::roborts_decision::Point::MergeFrom(from.start_position());
  }
}

void MultiRobot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roborts_decision.MultiRobot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiRobot::CopyFrom(const MultiRobot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_decision.MultiRobot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiRobot::IsInitialized() const {
  return true;
}

void MultiRobot::Swap(MultiRobot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MultiRobot::InternalSwap(MultiRobot* other) {
  using std::swap;
  swap(start_position_, other->start_position_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MultiRobot::GetMetadata() const {
  protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BlueOrRedGroup::InitAsDefaultInstance() {
  ::roborts_decision::_BlueOrRedGroup_default_instance_._instance.get_mutable()->master_bot_ = const_cast< ::roborts_decision::MultiRobot*>(
      ::roborts_decision::MultiRobot::internal_default_instance());
  ::roborts_decision::_BlueOrRedGroup_default_instance_._instance.get_mutable()->wing_bot_ = const_cast< ::roborts_decision::MultiRobot*>(
      ::roborts_decision::MultiRobot::internal_default_instance());
  ::roborts_decision::_BlueOrRedGroup_default_instance_._instance.get_mutable()->reload_point_ = const_cast< ::roborts_decision::Point*>(
      ::roborts_decision::Point::internal_default_instance());
  ::roborts_decision::_BlueOrRedGroup_default_instance_._instance.get_mutable()->shield_point_ = const_cast< ::roborts_decision::Point*>(
      ::roborts_decision::Point::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlueOrRedGroup::kMasterBotFieldNumber;
const int BlueOrRedGroup::kWingBotFieldNumber;
const int BlueOrRedGroup::kReloadPointFieldNumber;
const int BlueOrRedGroup::kShieldPointFieldNumber;
const int BlueOrRedGroup::kPatrolFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlueOrRedGroup::BlueOrRedGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_decision_2eproto::scc_info_BlueOrRedGroup.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_decision.BlueOrRedGroup)
}
BlueOrRedGroup::BlueOrRedGroup(const BlueOrRedGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      patrol_(from.patrol_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_master_bot()) {
    master_bot_ = new ::roborts_decision::MultiRobot(*from.master_bot_);
  } else {
    master_bot_ = NULL;
  }
  if (from.has_wing_bot()) {
    wing_bot_ = new ::roborts_decision::MultiRobot(*from.wing_bot_);
  } else {
    wing_bot_ = NULL;
  }
  if (from.has_reload_point()) {
    reload_point_ = new ::roborts_decision::Point(*from.reload_point_);
  } else {
    reload_point_ = NULL;
  }
  if (from.has_shield_point()) {
    shield_point_ = new ::roborts_decision::Point(*from.shield_point_);
  } else {
    shield_point_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:roborts_decision.BlueOrRedGroup)
}

void BlueOrRedGroup::SharedCtor() {
  ::memset(&master_bot_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shield_point_) -
      reinterpret_cast<char*>(&master_bot_)) + sizeof(shield_point_));
}

BlueOrRedGroup::~BlueOrRedGroup() {
  // @@protoc_insertion_point(destructor:roborts_decision.BlueOrRedGroup)
  SharedDtor();
}

void BlueOrRedGroup::SharedDtor() {
  if (this != internal_default_instance()) delete master_bot_;
  if (this != internal_default_instance()) delete wing_bot_;
  if (this != internal_default_instance()) delete reload_point_;
  if (this != internal_default_instance()) delete shield_point_;
}

void BlueOrRedGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BlueOrRedGroup::descriptor() {
  ::protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BlueOrRedGroup& BlueOrRedGroup::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_decision_2eproto::scc_info_BlueOrRedGroup.base);
  return *internal_default_instance();
}


void BlueOrRedGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_decision.BlueOrRedGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  patrol_.Clear();
  if (GetArenaNoVirtual() == NULL && master_bot_ != NULL) {
    delete master_bot_;
  }
  master_bot_ = NULL;
  if (GetArenaNoVirtual() == NULL && wing_bot_ != NULL) {
    delete wing_bot_;
  }
  wing_bot_ = NULL;
  if (GetArenaNoVirtual() == NULL && reload_point_ != NULL) {
    delete reload_point_;
  }
  reload_point_ = NULL;
  if (GetArenaNoVirtual() == NULL && shield_point_ != NULL) {
    delete shield_point_;
  }
  shield_point_ = NULL;
  _internal_metadata_.Clear();
}

bool BlueOrRedGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_decision.BlueOrRedGroup)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .roborts_decision.MultiRobot master_bot = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_master_bot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .roborts_decision.MultiRobot wing_bot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_wing_bot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .roborts_decision.Point reload_point = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reload_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .roborts_decision.Point shield_point = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_shield_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .roborts_decision.Point patrol = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_patrol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_decision.BlueOrRedGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_decision.BlueOrRedGroup)
  return false;
#undef DO_
}

void BlueOrRedGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_decision.BlueOrRedGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .roborts_decision.MultiRobot master_bot = 1;
  if (this->has_master_bot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_master_bot(), output);
  }

  // .roborts_decision.MultiRobot wing_bot = 2;
  if (this->has_wing_bot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_wing_bot(), output);
  }

  // .roborts_decision.Point reload_point = 3;
  if (this->has_reload_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_reload_point(), output);
  }

  // .roborts_decision.Point shield_point = 4;
  if (this->has_shield_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_shield_point(), output);
  }

  // repeated .roborts_decision.Point patrol = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->patrol_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->patrol(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_decision.BlueOrRedGroup)
}

::google::protobuf::uint8* BlueOrRedGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:roborts_decision.BlueOrRedGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .roborts_decision.MultiRobot master_bot = 1;
  if (this->has_master_bot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_master_bot(), deterministic, target);
  }

  // .roborts_decision.MultiRobot wing_bot = 2;
  if (this->has_wing_bot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_wing_bot(), deterministic, target);
  }

  // .roborts_decision.Point reload_point = 3;
  if (this->has_reload_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_reload_point(), deterministic, target);
  }

  // .roborts_decision.Point shield_point = 4;
  if (this->has_shield_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_shield_point(), deterministic, target);
  }

  // repeated .roborts_decision.Point patrol = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->patrol_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->patrol(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_decision.BlueOrRedGroup)
  return target;
}

size_t BlueOrRedGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_decision.BlueOrRedGroup)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .roborts_decision.Point patrol = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->patrol_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->patrol(static_cast<int>(i)));
    }
  }

  // .roborts_decision.MultiRobot master_bot = 1;
  if (this->has_master_bot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *master_bot_);
  }

  // .roborts_decision.MultiRobot wing_bot = 2;
  if (this->has_wing_bot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *wing_bot_);
  }

  // .roborts_decision.Point reload_point = 3;
  if (this->has_reload_point()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *reload_point_);
  }

  // .roborts_decision.Point shield_point = 4;
  if (this->has_shield_point()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *shield_point_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlueOrRedGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roborts_decision.BlueOrRedGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const BlueOrRedGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BlueOrRedGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roborts_decision.BlueOrRedGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roborts_decision.BlueOrRedGroup)
    MergeFrom(*source);
  }
}

void BlueOrRedGroup::MergeFrom(const BlueOrRedGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roborts_decision.BlueOrRedGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  patrol_.MergeFrom(from.patrol_);
  if (from.has_master_bot()) {
    mutable_master_bot()->::roborts_decision::MultiRobot::MergeFrom(from.master_bot());
  }
  if (from.has_wing_bot()) {
    mutable_wing_bot()->::roborts_decision::MultiRobot::MergeFrom(from.wing_bot());
  }
  if (from.has_reload_point()) {
    mutable_reload_point()->::roborts_decision::Point::MergeFrom(from.reload_point());
  }
  if (from.has_shield_point()) {
    mutable_shield_point()->::roborts_decision::Point::MergeFrom(from.shield_point());
  }
}

void BlueOrRedGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roborts_decision.BlueOrRedGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlueOrRedGroup::CopyFrom(const BlueOrRedGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_decision.BlueOrRedGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlueOrRedGroup::IsInitialized() const {
  return true;
}

void BlueOrRedGroup::Swap(BlueOrRedGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlueOrRedGroup::InternalSwap(BlueOrRedGroup* other) {
  using std::swap;
  CastToBase(&patrol_)->InternalSwap(CastToBase(&other->patrol_));
  swap(master_bot_, other->master_bot_);
  swap(wing_bot_, other->wing_bot_);
  swap(reload_point_, other->reload_point_);
  swap(shield_point_, other->shield_point_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BlueOrRedGroup::GetMetadata() const {
  protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DecisionConfig::InitAsDefaultInstance() {
  ::roborts_decision::_DecisionConfig_default_instance_._instance.get_mutable()->escape_ = const_cast< ::roborts_decision::EscapeConstraint*>(
      ::roborts_decision::EscapeConstraint::internal_default_instance());
  ::roborts_decision::_DecisionConfig_default_instance_._instance.get_mutable()->blue_ = const_cast< ::roborts_decision::BlueOrRedGroup*>(
      ::roborts_decision::BlueOrRedGroup::internal_default_instance());
  ::roborts_decision::_DecisionConfig_default_instance_._instance.get_mutable()->red_ = const_cast< ::roborts_decision::BlueOrRedGroup*>(
      ::roborts_decision::BlueOrRedGroup::internal_default_instance());
  ::roborts_decision::_DecisionConfig_default_instance_._instance.get_mutable()->search_limit_ = const_cast< ::roborts_decision::SearchConstraint*>(
      ::roborts_decision::SearchConstraint::internal_default_instance());
  ::roborts_decision::_DecisionConfig_default_instance_._instance.get_mutable()->whirl_vel_ = const_cast< ::roborts_decision::WhirlVel*>(
      ::roborts_decision::WhirlVel::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DecisionConfig::kStrategyFieldNumber;
const int DecisionConfig::kUseCameraFieldNumber;
const int DecisionConfig::kMasterFieldNumber;
const int DecisionConfig::kIsblueFieldNumber;
const int DecisionConfig::kUsewifiFieldNumber;
const int DecisionConfig::kMasterIpFieldNumber;
const int DecisionConfig::kGuardIpFieldNumber;
const int DecisionConfig::kRemainBulletFieldNumber;
const int DecisionConfig::kEscapeFieldNumber;
const int DecisionConfig::kBlueFieldNumber;
const int DecisionConfig::kRedFieldNumber;
const int DecisionConfig::kSearchLimitFieldNumber;
const int DecisionConfig::kWhirlVelFieldNumber;
const int DecisionConfig::kSearchRegion1FieldNumber;
const int DecisionConfig::kSearchRegion2FieldNumber;
const int DecisionConfig::kSearchRegion3FieldNumber;
const int DecisionConfig::kSearchRegion4FieldNumber;
const int DecisionConfig::kCanShootFieldNumber;
const int DecisionConfig::kCanDodgeFieldNumber;
const int DecisionConfig::kDodgeInReloadFieldNumber;
const int DecisionConfig::kShootHzFieldNumber;
const int DecisionConfig::kUseRefreeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DecisionConfig::DecisionConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_decision_2eproto::scc_info_DecisionConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_decision.DecisionConfig)
}
DecisionConfig::DecisionConfig(const DecisionConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      search_region_1_(from.search_region_1_),
      search_region_2_(from.search_region_2_),
      search_region_3_(from.search_region_3_),
      search_region_4_(from.search_region_4_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strategy_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strategy().size() > 0) {
    strategy_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strategy_);
  }
  master_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.master_ip().size() > 0) {
    master_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.master_ip_);
  }
  guard_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.guard_ip().size() > 0) {
    guard_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guard_ip_);
  }
  if (from.has_escape()) {
    escape_ = new ::roborts_decision::EscapeConstraint(*from.escape_);
  } else {
    escape_ = NULL;
  }
  if (from.has_blue()) {
    blue_ = new ::roborts_decision::BlueOrRedGroup(*from.blue_);
  } else {
    blue_ = NULL;
  }
  if (from.has_red()) {
    red_ = new ::roborts_decision::BlueOrRedGroup(*from.red_);
  } else {
    red_ = NULL;
  }
  if (from.has_search_limit()) {
    search_limit_ = new ::roborts_decision::SearchConstraint(*from.search_limit_);
  } else {
    search_limit_ = NULL;
  }
  if (from.has_whirl_vel()) {
    whirl_vel_ = new ::roborts_decision::WhirlVel(*from.whirl_vel_);
  } else {
    whirl_vel_ = NULL;
  }
  ::memcpy(&use_camera_, &from.use_camera_,
    static_cast<size_t>(reinterpret_cast<char*>(&shoot_hz_) -
    reinterpret_cast<char*>(&use_camera_)) + sizeof(shoot_hz_));
  // @@protoc_insertion_point(copy_constructor:roborts_decision.DecisionConfig)
}

void DecisionConfig::SharedCtor() {
  strategy_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  master_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guard_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&escape_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shoot_hz_) -
      reinterpret_cast<char*>(&escape_)) + sizeof(shoot_hz_));
}

DecisionConfig::~DecisionConfig() {
  // @@protoc_insertion_point(destructor:roborts_decision.DecisionConfig)
  SharedDtor();
}

void DecisionConfig::SharedDtor() {
  strategy_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  master_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guard_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete escape_;
  if (this != internal_default_instance()) delete blue_;
  if (this != internal_default_instance()) delete red_;
  if (this != internal_default_instance()) delete search_limit_;
  if (this != internal_default_instance()) delete whirl_vel_;
}

void DecisionConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DecisionConfig::descriptor() {
  ::protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DecisionConfig& DecisionConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_decision_2eproto::scc_info_DecisionConfig.base);
  return *internal_default_instance();
}


void DecisionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_decision.DecisionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  search_region_1_.Clear();
  search_region_2_.Clear();
  search_region_3_.Clear();
  search_region_4_.Clear();
  strategy_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  master_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guard_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && escape_ != NULL) {
    delete escape_;
  }
  escape_ = NULL;
  if (GetArenaNoVirtual() == NULL && blue_ != NULL) {
    delete blue_;
  }
  blue_ = NULL;
  if (GetArenaNoVirtual() == NULL && red_ != NULL) {
    delete red_;
  }
  red_ = NULL;
  if (GetArenaNoVirtual() == NULL && search_limit_ != NULL) {
    delete search_limit_;
  }
  search_limit_ = NULL;
  if (GetArenaNoVirtual() == NULL && whirl_vel_ != NULL) {
    delete whirl_vel_;
  }
  whirl_vel_ = NULL;
  ::memset(&use_camera_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shoot_hz_) -
      reinterpret_cast<char*>(&use_camera_)) + sizeof(shoot_hz_));
  _internal_metadata_.Clear();
}

bool DecisionConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_decision.DecisionConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string strategy = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strategy()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strategy().data(), static_cast<int>(this->strategy().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "roborts_decision.DecisionConfig.strategy"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_camera = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_camera_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool master = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &master_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isblue = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isblue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool usewifi = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &usewifi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string master_ip = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_master_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->master_ip().data(), static_cast<int>(this->master_ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "roborts_decision.DecisionConfig.master_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string guard_ip = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guard_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->guard_ip().data(), static_cast<int>(this->guard_ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "roborts_decision.DecisionConfig.guard_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 remain_bullet = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remain_bullet_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .roborts_decision.EscapeConstraint escape = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_escape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .roborts_decision.BlueOrRedGroup blue = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_blue()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .roborts_decision.BlueOrRedGroup red = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_red()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .roborts_decision.SearchConstraint search_limit = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_search_limit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .roborts_decision.WhirlVel whirl_vel = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_whirl_vel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .roborts_decision.Point search_region_1 = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_search_region_1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .roborts_decision.Point search_region_2 = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_search_region_2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .roborts_decision.Point search_region_3 = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_search_region_3()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .roborts_decision.Point search_region_4 = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_search_region_4()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool can_shoot = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_shoot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool can_dodge = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_dodge_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool dodge_in_reload = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dodge_in_reload_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 shoot_hz = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shoot_hz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_refree = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_refree_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_decision.DecisionConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_decision.DecisionConfig)
  return false;
#undef DO_
}

void DecisionConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_decision.DecisionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string strategy = 1;
  if (this->strategy().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strategy().data(), static_cast<int>(this->strategy().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "roborts_decision.DecisionConfig.strategy");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->strategy(), output);
  }

  // bool use_camera = 2;
  if (this->use_camera() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->use_camera(), output);
  }

  // bool master = 3;
  if (this->master() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->master(), output);
  }

  // bool isblue = 4;
  if (this->isblue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isblue(), output);
  }

  // bool usewifi = 5;
  if (this->usewifi() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->usewifi(), output);
  }

  // string master_ip = 6;
  if (this->master_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->master_ip().data(), static_cast<int>(this->master_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "roborts_decision.DecisionConfig.master_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->master_ip(), output);
  }

  // string guard_ip = 7;
  if (this->guard_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->guard_ip().data(), static_cast<int>(this->guard_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "roborts_decision.DecisionConfig.guard_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->guard_ip(), output);
  }

  // int32 remain_bullet = 8;
  if (this->remain_bullet() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->remain_bullet(), output);
  }

  // .roborts_decision.EscapeConstraint escape = 9;
  if (this->has_escape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_escape(), output);
  }

  // .roborts_decision.BlueOrRedGroup blue = 10;
  if (this->has_blue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_blue(), output);
  }

  // .roborts_decision.BlueOrRedGroup red = 11;
  if (this->has_red()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_red(), output);
  }

  // .roborts_decision.SearchConstraint search_limit = 12;
  if (this->has_search_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_search_limit(), output);
  }

  // .roborts_decision.WhirlVel whirl_vel = 13;
  if (this->has_whirl_vel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->_internal_whirl_vel(), output);
  }

  // repeated .roborts_decision.Point search_region_1 = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->search_region_1_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14,
      this->search_region_1(static_cast<int>(i)),
      output);
  }

  // repeated .roborts_decision.Point search_region_2 = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->search_region_2_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15,
      this->search_region_2(static_cast<int>(i)),
      output);
  }

  // repeated .roborts_decision.Point search_region_3 = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->search_region_3_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16,
      this->search_region_3(static_cast<int>(i)),
      output);
  }

  // repeated .roborts_decision.Point search_region_4 = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->search_region_4_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17,
      this->search_region_4(static_cast<int>(i)),
      output);
  }

  // bool can_shoot = 18;
  if (this->can_shoot() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->can_shoot(), output);
  }

  // bool can_dodge = 19;
  if (this->can_dodge() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->can_dodge(), output);
  }

  // bool dodge_in_reload = 20;
  if (this->dodge_in_reload() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->dodge_in_reload(), output);
  }

  // int32 shoot_hz = 21;
  if (this->shoot_hz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->shoot_hz(), output);
  }

  // bool use_refree = 22;
  if (this->use_refree() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->use_refree(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_decision.DecisionConfig)
}

::google::protobuf::uint8* DecisionConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:roborts_decision.DecisionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string strategy = 1;
  if (this->strategy().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strategy().data(), static_cast<int>(this->strategy().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "roborts_decision.DecisionConfig.strategy");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strategy(), target);
  }

  // bool use_camera = 2;
  if (this->use_camera() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->use_camera(), target);
  }

  // bool master = 3;
  if (this->master() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->master(), target);
  }

  // bool isblue = 4;
  if (this->isblue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isblue(), target);
  }

  // bool usewifi = 5;
  if (this->usewifi() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->usewifi(), target);
  }

  // string master_ip = 6;
  if (this->master_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->master_ip().data(), static_cast<int>(this->master_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "roborts_decision.DecisionConfig.master_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->master_ip(), target);
  }

  // string guard_ip = 7;
  if (this->guard_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->guard_ip().data(), static_cast<int>(this->guard_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "roborts_decision.DecisionConfig.guard_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->guard_ip(), target);
  }

  // int32 remain_bullet = 8;
  if (this->remain_bullet() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->remain_bullet(), target);
  }

  // .roborts_decision.EscapeConstraint escape = 9;
  if (this->has_escape()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_escape(), deterministic, target);
  }

  // .roborts_decision.BlueOrRedGroup blue = 10;
  if (this->has_blue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_blue(), deterministic, target);
  }

  // .roborts_decision.BlueOrRedGroup red = 11;
  if (this->has_red()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_red(), deterministic, target);
  }

  // .roborts_decision.SearchConstraint search_limit = 12;
  if (this->has_search_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_search_limit(), deterministic, target);
  }

  // .roborts_decision.WhirlVel whirl_vel = 13;
  if (this->has_whirl_vel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->_internal_whirl_vel(), deterministic, target);
  }

  // repeated .roborts_decision.Point search_region_1 = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->search_region_1_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->search_region_1(static_cast<int>(i)), deterministic, target);
  }

  // repeated .roborts_decision.Point search_region_2 = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->search_region_2_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->search_region_2(static_cast<int>(i)), deterministic, target);
  }

  // repeated .roborts_decision.Point search_region_3 = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->search_region_3_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, this->search_region_3(static_cast<int>(i)), deterministic, target);
  }

  // repeated .roborts_decision.Point search_region_4 = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->search_region_4_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, this->search_region_4(static_cast<int>(i)), deterministic, target);
  }

  // bool can_shoot = 18;
  if (this->can_shoot() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->can_shoot(), target);
  }

  // bool can_dodge = 19;
  if (this->can_dodge() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->can_dodge(), target);
  }

  // bool dodge_in_reload = 20;
  if (this->dodge_in_reload() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->dodge_in_reload(), target);
  }

  // int32 shoot_hz = 21;
  if (this->shoot_hz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->shoot_hz(), target);
  }

  // bool use_refree = 22;
  if (this->use_refree() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->use_refree(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_decision.DecisionConfig)
  return target;
}

size_t DecisionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_decision.DecisionConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .roborts_decision.Point search_region_1 = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->search_region_1_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->search_region_1(static_cast<int>(i)));
    }
  }

  // repeated .roborts_decision.Point search_region_2 = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->search_region_2_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->search_region_2(static_cast<int>(i)));
    }
  }

  // repeated .roborts_decision.Point search_region_3 = 16;
  {
    unsigned int count = static_cast<unsigned int>(this->search_region_3_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->search_region_3(static_cast<int>(i)));
    }
  }

  // repeated .roborts_decision.Point search_region_4 = 17;
  {
    unsigned int count = static_cast<unsigned int>(this->search_region_4_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->search_region_4(static_cast<int>(i)));
    }
  }

  // string strategy = 1;
  if (this->strategy().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strategy());
  }

  // string master_ip = 6;
  if (this->master_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->master_ip());
  }

  // string guard_ip = 7;
  if (this->guard_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->guard_ip());
  }

  // .roborts_decision.EscapeConstraint escape = 9;
  if (this->has_escape()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *escape_);
  }

  // .roborts_decision.BlueOrRedGroup blue = 10;
  if (this->has_blue()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *blue_);
  }

  // .roborts_decision.BlueOrRedGroup red = 11;
  if (this->has_red()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *red_);
  }

  // .roborts_decision.SearchConstraint search_limit = 12;
  if (this->has_search_limit()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *search_limit_);
  }

  // .roborts_decision.WhirlVel whirl_vel = 13;
  if (this->has_whirl_vel()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *whirl_vel_);
  }

  // bool use_camera = 2;
  if (this->use_camera() != 0) {
    total_size += 1 + 1;
  }

  // bool master = 3;
  if (this->master() != 0) {
    total_size += 1 + 1;
  }

  // bool isblue = 4;
  if (this->isblue() != 0) {
    total_size += 1 + 1;
  }

  // bool usewifi = 5;
  if (this->usewifi() != 0) {
    total_size += 1 + 1;
  }

  // int32 remain_bullet = 8;
  if (this->remain_bullet() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->remain_bullet());
  }

  // bool can_shoot = 18;
  if (this->can_shoot() != 0) {
    total_size += 2 + 1;
  }

  // bool can_dodge = 19;
  if (this->can_dodge() != 0) {
    total_size += 2 + 1;
  }

  // bool dodge_in_reload = 20;
  if (this->dodge_in_reload() != 0) {
    total_size += 2 + 1;
  }

  // bool use_refree = 22;
  if (this->use_refree() != 0) {
    total_size += 2 + 1;
  }

  // int32 shoot_hz = 21;
  if (this->shoot_hz() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->shoot_hz());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DecisionConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roborts_decision.DecisionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DecisionConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DecisionConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roborts_decision.DecisionConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roborts_decision.DecisionConfig)
    MergeFrom(*source);
  }
}

void DecisionConfig::MergeFrom(const DecisionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roborts_decision.DecisionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  search_region_1_.MergeFrom(from.search_region_1_);
  search_region_2_.MergeFrom(from.search_region_2_);
  search_region_3_.MergeFrom(from.search_region_3_);
  search_region_4_.MergeFrom(from.search_region_4_);
  if (from.strategy().size() > 0) {

    strategy_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strategy_);
  }
  if (from.master_ip().size() > 0) {

    master_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.master_ip_);
  }
  if (from.guard_ip().size() > 0) {

    guard_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guard_ip_);
  }
  if (from.has_escape()) {
    mutable_escape()->::roborts_decision::EscapeConstraint::MergeFrom(from.escape());
  }
  if (from.has_blue()) {
    mutable_blue()->::roborts_decision::BlueOrRedGroup::MergeFrom(from.blue());
  }
  if (from.has_red()) {
    mutable_red()->::roborts_decision::BlueOrRedGroup::MergeFrom(from.red());
  }
  if (from.has_search_limit()) {
    mutable_search_limit()->::roborts_decision::SearchConstraint::MergeFrom(from.search_limit());
  }
  if (from.has_whirl_vel()) {
    mutable_whirl_vel()->::roborts_decision::WhirlVel::MergeFrom(from.whirl_vel());
  }
  if (from.use_camera() != 0) {
    set_use_camera(from.use_camera());
  }
  if (from.master() != 0) {
    set_master(from.master());
  }
  if (from.isblue() != 0) {
    set_isblue(from.isblue());
  }
  if (from.usewifi() != 0) {
    set_usewifi(from.usewifi());
  }
  if (from.remain_bullet() != 0) {
    set_remain_bullet(from.remain_bullet());
  }
  if (from.can_shoot() != 0) {
    set_can_shoot(from.can_shoot());
  }
  if (from.can_dodge() != 0) {
    set_can_dodge(from.can_dodge());
  }
  if (from.dodge_in_reload() != 0) {
    set_dodge_in_reload(from.dodge_in_reload());
  }
  if (from.use_refree() != 0) {
    set_use_refree(from.use_refree());
  }
  if (from.shoot_hz() != 0) {
    set_shoot_hz(from.shoot_hz());
  }
}

void DecisionConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roborts_decision.DecisionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DecisionConfig::CopyFrom(const DecisionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_decision.DecisionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecisionConfig::IsInitialized() const {
  return true;
}

void DecisionConfig::Swap(DecisionConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DecisionConfig::InternalSwap(DecisionConfig* other) {
  using std::swap;
  CastToBase(&search_region_1_)->InternalSwap(CastToBase(&other->search_region_1_));
  CastToBase(&search_region_2_)->InternalSwap(CastToBase(&other->search_region_2_));
  CastToBase(&search_region_3_)->InternalSwap(CastToBase(&other->search_region_3_));
  CastToBase(&search_region_4_)->InternalSwap(CastToBase(&other->search_region_4_));
  strategy_.Swap(&other->strategy_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  master_ip_.Swap(&other->master_ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  guard_ip_.Swap(&other->guard_ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(escape_, other->escape_);
  swap(blue_, other->blue_);
  swap(red_, other->red_);
  swap(search_limit_, other->search_limit_);
  swap(whirl_vel_, other->whirl_vel_);
  swap(use_camera_, other->use_camera_);
  swap(master_, other->master_);
  swap(isblue_, other->isblue_);
  swap(usewifi_, other->usewifi_);
  swap(remain_bullet_, other->remain_bullet_);
  swap(can_shoot_, other->can_shoot_);
  swap(can_dodge_, other->can_dodge_);
  swap(dodge_in_reload_, other->dodge_in_reload_);
  swap(use_refree_, other->use_refree_);
  swap(shoot_hz_, other->shoot_hz_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DecisionConfig::GetMetadata() const {
  protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace roborts_decision
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::roborts_decision::Point* Arena::CreateMaybeMessage< ::roborts_decision::Point >(Arena* arena) {
  return Arena::CreateInternal< ::roborts_decision::Point >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::roborts_decision::EscapeConstraint* Arena::CreateMaybeMessage< ::roborts_decision::EscapeConstraint >(Arena* arena) {
  return Arena::CreateInternal< ::roborts_decision::EscapeConstraint >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::roborts_decision::SearchConstraint* Arena::CreateMaybeMessage< ::roborts_decision::SearchConstraint >(Arena* arena) {
  return Arena::CreateInternal< ::roborts_decision::SearchConstraint >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::roborts_decision::WhirlVel* Arena::CreateMaybeMessage< ::roborts_decision::WhirlVel >(Arena* arena) {
  return Arena::CreateInternal< ::roborts_decision::WhirlVel >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::roborts_decision::MultiRobot* Arena::CreateMaybeMessage< ::roborts_decision::MultiRobot >(Arena* arena) {
  return Arena::CreateInternal< ::roborts_decision::MultiRobot >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::roborts_decision::BlueOrRedGroup* Arena::CreateMaybeMessage< ::roborts_decision::BlueOrRedGroup >(Arena* arena) {
  return Arena::CreateInternal< ::roborts_decision::BlueOrRedGroup >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::roborts_decision::DecisionConfig* Arena::CreateMaybeMessage< ::roborts_decision::DecisionConfig >(Arena* arena) {
  return Arena::CreateInternal< ::roborts_decision::DecisionConfig >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
